require 'image'		-- image load
require 'gnuplot'	-- plotting stuffgetTracksAndDetsTables
require 'lfs' 		-- luaFileSystem, check for dir, etc...


MOT2015 = require '../data/mot2015'

--------------------txt reader---------------------------------------
---------------------------------------------------------------------
function csvSplit(str,sep)
    sep = sep or ','
    fields = {}
    local matchfunc = string.gmatch(str,"([^"..sep.."]+)")
    if not matchfunc then return {str} end
    for str in matchfunc do
        table.insert(fields,str)

    end
    return fields
end


---------------------------------------------------------------------
function csvRead(path, sep, tonum)
    tonum = tonum or true
    sep = sep or ','
    local csvFile = {}
    local file = assert(io.open(path, "r"))
    for line in file:lines() do
        fields = csvSplit(line, sep)
        if tonum then -- convert numeric fields to numbers
            for i=1,#fields do
                fields[i] = tonumber(fields[i]) or fields[i]
            end
        end
        table.insert(csvFile, fields)
    end
    file:close()
    return csvFile
end

---------------------------------------------------------------------
---------------------------------------------------------------------
function csvWrite(path, data, sep)
    sep = sep or ','
    local file = assert(io.open(path, "w"))
    
    if type(data)=='table' then
      for i=1,#data do
	  for j=1,#data[i] do
	      if j>1 then file:write(sep) end
	      file:write(data[i][j])
	  end
	  file:write('\n')
      end
    elseif torch.isTensor(data) then
      if data:nDimension() < 2 then -- zero solution case
-- 	file:write('\n')
      else
	for i=1,data:size(1) do
	    for j=1,data:size(2) do
		if j>1 then file:write(sep) end
		file:write(data[i][j])
	    end
	    file:write('\n')
	end      
      end
    else
      error('unknown data type in csvwrite')
    end  
    file:close()
end


---------------------------------------------------------------------
function readTXT(datafile, mode)
  -- local datafile = '/media/sf_vmex/2DMOT2015/data/TUD-Campus/gt/gt.txt'

  local gtraw = csvRead(datafile)
  local data={}
  local confThr = -1e5
  if opt.detConfThr ~= nil then confThr = opt.detConfThr end
  if sopt~=nil and sopt.detConfThr ~= nil then confThr = sopt.detConfThr end
--   print(confThr)
    
  
  
  if not mode then
	-- figure out whether we are in GT (1) or in Det (2) mode
	mode = 1
	if gtraw[1][7] ~= -1 then mode = 2 end -- very simple, gt do not have scores
  end
  -- go through all lines
  for l = 1,tabLen(gtraw) do    
    fr=gtraw[l][1]
    id=gtraw[l][2]
    bx=gtraw[l][3]
    by=gtraw[l][4]
    bw=gtraw[l][5]
    bh=gtraw[l][6]
    sc=gtraw[l][7]
    if data[fr] == nil then
      data[fr] = {}      
    end
    -- detections do not have IDs, simply increment
    if mode==2 then id = table.getn(data[fr]) + 1 end
    
    -- only use box for ground truth, and box + confidence for detections
    if mode == 1 then
      table.insert(data[fr],id,torch.Tensor({bx,by,bw,bh}):resize(1,4)) 
    elseif mode == 2 and sc > confThr then      
      table.insert(data[fr],id,torch.Tensor({bx,by,bw,bh,sc}):resize(1,5)) 
    end
  end
  
  -- shift (left,top) to (center_x, center_y)  
  for k,v in pairs(data) do
    for l,m in pairs(v) do
      local box = data[k][l]:squeeze()
      box[1]=box[1]+box[3]/2 -- this already changes data in place
      box[2]=box[2]+box[4]/2
--       data[k][l] = box:reshape(1,box:nElement())
    end
  end    

  -- return table
  return data
end


--------------------------------------------------------------------------
--- Write a txt file format of MOTChallenge 2015 (frame, id, bbx,...)
-- @param data	The tensor containing bounding boxes, a FxNxD tensor.
-- @param datafile Path to data file.
-- @param thr 	A threshold for ignoring boxes.
-- @param mode 	(optional)  1 = result, 2 = detections
-- @see readTXT
function writeTXT(data, datafile, thr, mode)
  thr = thr or 0
  mode = mode or 1 	-- defaults to bounding boxes with id
  
  local N,F,D = getDataSize(data)
  local stateDim = math.min(4,D)
  
  -- how many boxes are present
  nBoxes = torch.sum(torch.ne(data:narrow(3,1,1):squeeze(),0))
  nBoxes = 0
  for i=1,N do for t=1,F do
    if torch.sum(torch.abs(data[{{i},{t},{1,stateDim}}])) ~= 0 then nBoxes = nBoxes + 1 end
  end
  end
  
--   print(data)
--   print(nBoxes)
--   abort()
--   
  
  -- Shift cx,cy back to left,top
--   print(data[1])
  if D>=4 then
    for i=1,N do
      for t=1,F do
	data[i][t][1] = data[i][t][1] - data[i][t][3]/2
	data[i][t][2] = data[i][t][2] - data[i][t][4]/2
      end
    end
  end 
--   print(data[1])
  
  
  local out = torch.Tensor(nBoxes, 7):fill(-1)	-- the tensor to be written
--   print(out:size())
--   print(data:size())
  
  if mode==2 then error("writeTXT for detections not implemented") end

  bcnt=0 -- box counter
  for t=1,data:size(2) do    
    for i=1,data:size(1) do
--       x = data[i][t][1] -- x coordinate
--       nz = 0
--       for d=1,D do if data[i][t][d]~=0 t
      if torch.sum(torch.abs(data[{{i},{t},{1,stateDim}}])) ~= 0 then -- if all coordinates 0, ignore
	bcnt=bcnt+1
-- 	print(bcnt)
	out[bcnt][1] = t
	out[bcnt][2] = i
	for d=1,data:size(3) do
	  out[bcnt][d+2] = data[i][t][d]
	end
      end
      
  end
  end

  csvWrite(datafile, out)
  
end
---------------------------------txt reader ended------------------
-------------------------------------------------------------------



----------------image process -------------------------------------
-------------------------------------------------------------------
--crop image to patch
function im_crop(img,bb)
    local imSize = img:size()
    local x1 = math.min(math.max(bb[1]-bb[3]/2,1),imSize[3]-1)
    local y1 = math.min(math.max(bb[2]-bb[4]/2,1),imSize[2]-1)
    local x2 = math.max(math.min(x1+bb[3],imSize[3]),1)
    local y2 = math.max(math.min(y1+bb[4],imSize[2]),1)
    bb[1] = x1 + (x2-x1)/2
    bb[2] = y1 + (y2-y1)/2
    bb[3] = x2 - x1
    bb[4] = y2 - y1

    local dst = image.crop(img,x1,y1,x2,y2)
    return dst
end

------------------------------------------------------------------
--boxIoU caculate IoU of two bounding boxes
function boxIoU(box1,box2)
    local ax1 = box1[1] - box1[3]/2; local ax2 = ax1 + box1[3];
    local ay1 = box1[2] - box1[4]/2; local ay2 = ay1 + box1[4];

    local bx1 = box2[1] - box2[3]/2; local bx2 = bx1 + box2[3];
    local by1 = box2[2] - box2[4]/2; local by2 = by1 + box2[4];
    
    local hor = math.min(ax2,bx2) - math.max(ax1,bx1)

    local ver = 0
    if hor > 0 then
        ver = math.min(ay2,by2) - math.max(ay1,by1)
    end
    if ver < 0 then ver = 0 end
    local isect = hor*ver
    local union = box1[3]*box1[4] + box2[3]*box2[4] - isect
    if union <= 0 then return 0 end

    return isect / union
end

------------------------------------------------------------------
--getDimension


------------------------------------------------------------------
--find the closest box
function findClosestTrack(det, tracks)
    local CId = 0
    local CBox = torch.Tensor(1,5):zero()
    local CDist = 1e9
    for id,bbox in pairs(tracks) do
        local dist = math.pow(bbox[1][1] - det[1][1],2) + math.pow(bbox[1][2] - det[1][2],2)
        if dist < CDist then
            CId = id
            Cbox = bbox:clone()
            CDist = dist
        end

    end
    return CId,Cbox,CDist
end

------------------------------------------------------------------
--find the most closest IoU
function findClosestTrackIOU(det, tracks)
    local CId = 0
    local Cbox = torch.Tensor(1,5):zero()
    local CIoU = -1
    for id,bbox in pairs(tracks) do
        local iou = boxIoU(det[1],bbox[1])
        if iou > CIoU then
            CIoU = iou
            Cbox = bbox:clone()
            CId = id
        end
    end

    return CId, Cbox, CIoU
end

-------------------------------------------------------------------
----nms 
function nms(det,dets,threshold)
    threshold = threshold or 0.4
    local nmstable = {}
    for id,bbox in pairs(dets) do
        local iou = boxIoU(det[1],bbox[1])
        if iou > threshold and (bbox[1][6] < 0.3 or det[1][5] == bbox[1][5]) then
            table.insert(nmstable,#nmstable+1,id)
        end
    end
    for ind,id in pairs(nmstable) do
        table.remove(dets,id)
    end
    nmstable = {}
    --return dets
end

----------------------------------------------------------------
--sign()
function sign(a)
    if a > 0 then return 1 end
    if a == 0 then return 0 end
    if a < 0 then return -1 end
end

-------------------------------------------------------------------
-- generate motion smoothness
function motion_smooth(bbox)
    local smooth = {}
    local mu1 = 0
    local b1 = 1/15
    local mu2 = 1
    local b2 = 1/40
    math.randomseed(os.time())
    for i = 1,5 do
        local c1 = math.random() - 0.5
        local c2 = math.random() - 0.5
        local s1 = math.random() - 0.5
        local s2 = math.random() - 0.5

        local dcx = mu1 - b1*sign(c1)*math.log(1-2*math.abs(c1))
        local dcy = mu1 - b1*sign(c2)*math.log(1-2*math.abs(c2))
        local dw = mu2 - b2*sign(s1)*math.log(1-2*math.abs(s1))
        local dh = mu2 - b2*sign(s2)*math.log(1-2*math.abs(s2))
        if dw < 0.8 then dw = 0.8 end
        if dw > 1.2 then dw = 1.2 end
        if dh < 0.8 then dh = 0.8 end
        if dh > 1.2 then dh = 1.2 end
        local cx = bbox[1]+bbox[3]*dcx
        local cy = bbox[2]+bbox[4]*dcy
        local w = bbox[3]*dw
        local h = bbox[4]*dh
        --cx = math.floor(math.min(math.max(cx,1),imSize[3]-1))
        --cy = math.floor(math.min(math.max(cy,1),imSize[2]-1))
        --w = math.floor(math.min(math.max(w,1),imSize[3]-1))
        --h = math.floor(math.min(math.max(h,1),imSize[2]-1))

        local bbox_s = torch.Tensor(1,4)

        bbox_s[1][1] = cx
        bbox_s[1][2] = cy
        bbox_s[1][3] = w
        bbox_s[1][4] = h
        
        table.insert(smooth,i,bbox_s)
    end
    return smooth
end

---------------------------------------------------------------------



